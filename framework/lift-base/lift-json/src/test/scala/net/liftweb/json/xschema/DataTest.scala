// These tests were auto-generated by Lift Json XSchema - do not edit
package net.liftweb.json.xschema {
  import _root_.org.specs.Specification
  import _root_.org.specs.runner.{Runner, JUnit}
  
  import net.liftweb.json.JsonParser._
  import net.liftweb.json.JsonAST._
  
  import net.liftweb.json.xschema.Serialization._
  import net.liftweb.json.xschema.Constants._

  import net.liftweb.json.xschema.{XSchema, XReference, XPrimitiveRef, XContainerRef, XCollection, XDefinition, XMultitype, XField, XOrder, XRoot, XDefinitionRef, XBoolean, XInt, XLong, XFloat, XDouble, XString, XJSON, XList, XSet, XArray, XMap, XOptional, XTuple, XProduct, XCoproduct, XUnion, XConstant, XRealField, XViewField, XConstantField, XOrderAscending, XOrderDescending, XOrderIgnore}
  
  object ProductTestData {
    lazy val TestXRoot: net.liftweb.json.xschema.XRoot = JObject(Nil).deserialize[net.liftweb.json.xschema.XRoot]
    
    lazy val TestXDefinitionRef: net.liftweb.json.xschema.XDefinitionRef = JObject(Nil).deserialize[net.liftweb.json.xschema.XDefinitionRef]
    
    lazy val TestXBoolean: net.liftweb.json.xschema.XBoolean.type = Extractors.XBooleanExtractor.extract(JObject(Nil))
    
    lazy val TestXInt: net.liftweb.json.xschema.XInt.type = Extractors.XIntExtractor.extract(JObject(Nil))
    
    lazy val TestXLong: net.liftweb.json.xschema.XLong.type = Extractors.XLongExtractor.extract(JObject(Nil))
    
    lazy val TestXFloat: net.liftweb.json.xschema.XFloat.type = Extractors.XFloatExtractor.extract(JObject(Nil))
    
    lazy val TestXDouble: net.liftweb.json.xschema.XDouble.type = Extractors.XDoubleExtractor.extract(JObject(Nil))
    
    lazy val TestXString: net.liftweb.json.xschema.XString.type = Extractors.XStringExtractor.extract(JObject(Nil))
    
    lazy val TestXJSON: net.liftweb.json.xschema.XJSON.type = Extractors.XJSONExtractor.extract(JObject(Nil))
    
    lazy val TestXList: net.liftweb.json.xschema.XList = JObject(Nil).deserialize[net.liftweb.json.xschema.XList]
    
    lazy val TestXSet: net.liftweb.json.xschema.XSet = JObject(Nil).deserialize[net.liftweb.json.xschema.XSet]
    
    lazy val TestXArray: net.liftweb.json.xschema.XArray = JObject(Nil).deserialize[net.liftweb.json.xschema.XArray]
    
    lazy val TestXMap: net.liftweb.json.xschema.XMap = JObject(Nil).deserialize[net.liftweb.json.xschema.XMap]
    
    lazy val TestXOptional: net.liftweb.json.xschema.XOptional = JObject(Nil).deserialize[net.liftweb.json.xschema.XOptional]
    
    lazy val TestXTuple: net.liftweb.json.xschema.XTuple = JObject(Nil).deserialize[net.liftweb.json.xschema.XTuple]
    
    lazy val TestXProduct: net.liftweb.json.xschema.XProduct = JObject(Nil).deserialize[net.liftweb.json.xschema.XProduct]
    
    lazy val TestXCoproduct: net.liftweb.json.xschema.XCoproduct = JObject(Nil).deserialize[net.liftweb.json.xschema.XCoproduct]
    
    lazy val TestXUnion: net.liftweb.json.xschema.XUnion = JObject(Nil).deserialize[net.liftweb.json.xschema.XUnion]
    
    lazy val TestXConstant: net.liftweb.json.xschema.XConstant = JObject(Nil).deserialize[net.liftweb.json.xschema.XConstant]
    
    lazy val TestXRealField: net.liftweb.json.xschema.XRealField = JObject(Nil).deserialize[net.liftweb.json.xschema.XRealField]
    
    lazy val TestXViewField: net.liftweb.json.xschema.XViewField = JObject(Nil).deserialize[net.liftweb.json.xschema.XViewField]
    
    lazy val TestXConstantField: net.liftweb.json.xschema.XConstantField = JObject(Nil).deserialize[net.liftweb.json.xschema.XConstantField]
    
    lazy val TestXOrderAscending: net.liftweb.json.xschema.XOrderAscending.type = Extractors.XOrderAscendingExtractor.extract(JObject(Nil))
    
    lazy val TestXOrderDescending: net.liftweb.json.xschema.XOrderDescending.type = Extractors.XOrderDescendingExtractor.extract(JObject(Nil))
    
    lazy val TestXOrderIgnore: net.liftweb.json.xschema.XOrderIgnore.type = Extractors.XOrderIgnoreExtractor.extract(JObject(Nil))
  }
  class DataProductSerializationTest extends Runner(DataProductSerializationExamples) with JUnit
  object DataProductSerializationExamples extends Specification {
    "Deserialization of XRoot succeeds even when information is missing" in {
      ProductTestData.TestXRoot.isInstanceOf[net.liftweb.json.xschema.XRoot] must be (true)
    }
    "Serialization of XRoot has non-zero information content" in {
      ProductTestData.TestXRoot.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XDefinitionRef succeeds even when information is missing" in {
      ProductTestData.TestXDefinitionRef.isInstanceOf[net.liftweb.json.xschema.XDefinitionRef] must be (true)
    }
    "Serialization of XDefinitionRef has non-zero information content" in {
      ProductTestData.TestXDefinitionRef.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XBoolean succeeds even when information is missing" in {
      ProductTestData.TestXBoolean.isInstanceOf[net.liftweb.json.xschema.XBoolean.type] must be (true)
    }
    "Serialization of XBoolean has non-zero information content" in {
      Decomposers.XBooleanDecomposer.decompose(ProductTestData.TestXBoolean) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XInt succeeds even when information is missing" in {
      ProductTestData.TestXInt.isInstanceOf[net.liftweb.json.xschema.XInt.type] must be (true)
    }
    "Serialization of XInt has non-zero information content" in {
      Decomposers.XIntDecomposer.decompose(ProductTestData.TestXInt) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XLong succeeds even when information is missing" in {
      ProductTestData.TestXLong.isInstanceOf[net.liftweb.json.xschema.XLong.type] must be (true)
    }
    "Serialization of XLong has non-zero information content" in {
      Decomposers.XLongDecomposer.decompose(ProductTestData.TestXLong) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XFloat succeeds even when information is missing" in {
      ProductTestData.TestXFloat.isInstanceOf[net.liftweb.json.xschema.XFloat.type] must be (true)
    }
    "Serialization of XFloat has non-zero information content" in {
      Decomposers.XFloatDecomposer.decompose(ProductTestData.TestXFloat) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XDouble succeeds even when information is missing" in {
      ProductTestData.TestXDouble.isInstanceOf[net.liftweb.json.xschema.XDouble.type] must be (true)
    }
    "Serialization of XDouble has non-zero information content" in {
      Decomposers.XDoubleDecomposer.decompose(ProductTestData.TestXDouble) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XString succeeds even when information is missing" in {
      ProductTestData.TestXString.isInstanceOf[net.liftweb.json.xschema.XString.type] must be (true)
    }
    "Serialization of XString has non-zero information content" in {
      Decomposers.XStringDecomposer.decompose(ProductTestData.TestXString) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XJSON succeeds even when information is missing" in {
      ProductTestData.TestXJSON.isInstanceOf[net.liftweb.json.xschema.XJSON.type] must be (true)
    }
    "Serialization of XJSON has non-zero information content" in {
      Decomposers.XJSONDecomposer.decompose(ProductTestData.TestXJSON) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XList succeeds even when information is missing" in {
      ProductTestData.TestXList.isInstanceOf[net.liftweb.json.xschema.XList] must be (true)
    }
    "Serialization of XList has non-zero information content" in {
      ProductTestData.TestXList.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XSet succeeds even when information is missing" in {
      ProductTestData.TestXSet.isInstanceOf[net.liftweb.json.xschema.XSet] must be (true)
    }
    "Serialization of XSet has non-zero information content" in {
      ProductTestData.TestXSet.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XArray succeeds even when information is missing" in {
      ProductTestData.TestXArray.isInstanceOf[net.liftweb.json.xschema.XArray] must be (true)
    }
    "Serialization of XArray has non-zero information content" in {
      ProductTestData.TestXArray.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XMap succeeds even when information is missing" in {
      ProductTestData.TestXMap.isInstanceOf[net.liftweb.json.xschema.XMap] must be (true)
    }
    "Serialization of XMap has non-zero information content" in {
      ProductTestData.TestXMap.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XOptional succeeds even when information is missing" in {
      ProductTestData.TestXOptional.isInstanceOf[net.liftweb.json.xschema.XOptional] must be (true)
    }
    "Serialization of XOptional has non-zero information content" in {
      ProductTestData.TestXOptional.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XTuple succeeds even when information is missing" in {
      ProductTestData.TestXTuple.isInstanceOf[net.liftweb.json.xschema.XTuple] must be (true)
    }
    "Serialization of XTuple has non-zero information content" in {
      ProductTestData.TestXTuple.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XProduct succeeds even when information is missing" in {
      ProductTestData.TestXProduct.isInstanceOf[net.liftweb.json.xschema.XProduct] must be (true)
    }
    "Serialization of XProduct has non-zero information content" in {
      ProductTestData.TestXProduct.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XCoproduct succeeds even when information is missing" in {
      ProductTestData.TestXCoproduct.isInstanceOf[net.liftweb.json.xschema.XCoproduct] must be (true)
    }
    "Serialization of XCoproduct has non-zero information content" in {
      ProductTestData.TestXCoproduct.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XUnion succeeds even when information is missing" in {
      ProductTestData.TestXUnion.isInstanceOf[net.liftweb.json.xschema.XUnion] must be (true)
    }
    "Serialization of XUnion has non-zero information content" in {
      ProductTestData.TestXUnion.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XConstant succeeds even when information is missing" in {
      ProductTestData.TestXConstant.isInstanceOf[net.liftweb.json.xschema.XConstant] must be (true)
    }
    "Serialization of XConstant has non-zero information content" in {
      ProductTestData.TestXConstant.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XRealField succeeds even when information is missing" in {
      ProductTestData.TestXRealField.isInstanceOf[net.liftweb.json.xschema.XRealField] must be (true)
    }
    "Serialization of XRealField has non-zero information content" in {
      ProductTestData.TestXRealField.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XViewField succeeds even when information is missing" in {
      ProductTestData.TestXViewField.isInstanceOf[net.liftweb.json.xschema.XViewField] must be (true)
    }
    "Serialization of XViewField has non-zero information content" in {
      ProductTestData.TestXViewField.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XConstantField succeeds even when information is missing" in {
      ProductTestData.TestXConstantField.isInstanceOf[net.liftweb.json.xschema.XConstantField] must be (true)
    }
    "Serialization of XConstantField has non-zero information content" in {
      ProductTestData.TestXConstantField.serialize mustNot be (JObject(Nil))
    }
  
    
    "Deserialization of XOrderAscending succeeds even when information is missing" in {
      ProductTestData.TestXOrderAscending.isInstanceOf[net.liftweb.json.xschema.XOrderAscending.type] must be (true)
    }
    "Serialization of XOrderAscending has non-zero information content" in {
      Decomposers.XOrderAscendingDecomposer.decompose(ProductTestData.TestXOrderAscending) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XOrderDescending succeeds even when information is missing" in {
      ProductTestData.TestXOrderDescending.isInstanceOf[net.liftweb.json.xschema.XOrderDescending.type] must be (true)
    }
    "Serialization of XOrderDescending has non-zero information content" in {
      Decomposers.XOrderDescendingDecomposer.decompose(ProductTestData.TestXOrderDescending) mustNot be (JObject(Nil))
    }
    
    "Deserialization of XOrderIgnore succeeds even when information is missing" in {
      ProductTestData.TestXOrderIgnore.isInstanceOf[net.liftweb.json.xschema.XOrderIgnore.type] must be (true)
    }
    "Serialization of XOrderIgnore has non-zero information content" in {
      Decomposers.XOrderIgnoreDecomposer.decompose(ProductTestData.TestXOrderIgnore) mustNot be (JObject(Nil))
    }
  }
  object CoproductTestData {
    lazy val TestXSchema: net.liftweb.json.xschema.XSchema = JObject(Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXProduct: net.liftweb.json.xschema.XSchema = JObject(JField("XProduct", net.liftweb.json.xschema.Decomposers.XProductDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXProduct)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXCoproduct: net.liftweb.json.xschema.XSchema = JObject(JField("XCoproduct", net.liftweb.json.xschema.Decomposers.XCoproductDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXCoproduct)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXUnion: net.liftweb.json.xschema.XSchema = JObject(JField("XUnion", net.liftweb.json.xschema.Decomposers.XUnionDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXUnion)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXBoolean: net.liftweb.json.xschema.XSchema = JObject(JField("XBoolean", net.liftweb.json.xschema.Decomposers.XBooleanDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXBoolean)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXInt: net.liftweb.json.xschema.XSchema = JObject(JField("XInt", net.liftweb.json.xschema.Decomposers.XIntDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXInt)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXLong: net.liftweb.json.xschema.XSchema = JObject(JField("XLong", net.liftweb.json.xschema.Decomposers.XLongDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXLong)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXFloat: net.liftweb.json.xschema.XSchema = JObject(JField("XFloat", net.liftweb.json.xschema.Decomposers.XFloatDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXFloat)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXDouble: net.liftweb.json.xschema.XSchema = JObject(JField("XDouble", net.liftweb.json.xschema.Decomposers.XDoubleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXDouble)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXString: net.liftweb.json.xschema.XSchema = JObject(JField("XString", net.liftweb.json.xschema.Decomposers.XStringDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXString)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXJSON: net.liftweb.json.xschema.XSchema = JObject(JField("XJSON", net.liftweb.json.xschema.Decomposers.XJSONDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXJSON)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXList: net.liftweb.json.xschema.XSchema = JObject(JField("XList", net.liftweb.json.xschema.Decomposers.XListDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXList)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXSet: net.liftweb.json.xschema.XSchema = JObject(JField("XSet", net.liftweb.json.xschema.Decomposers.XSetDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXSet)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXArray: net.liftweb.json.xschema.XSchema = JObject(JField("XArray", net.liftweb.json.xschema.Decomposers.XArrayDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXArray)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXMap: net.liftweb.json.xschema.XSchema = JObject(JField("XMap", net.liftweb.json.xschema.Decomposers.XMapDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXMap)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXOptional: net.liftweb.json.xschema.XSchema = JObject(JField("XOptional", net.liftweb.json.xschema.Decomposers.XOptionalDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOptional)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXTuple: net.liftweb.json.xschema.XSchema = JObject(JField("XTuple", net.liftweb.json.xschema.Decomposers.XTupleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXTuple)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXDefinitionRef: net.liftweb.json.xschema.XSchema = JObject(JField("XDefinitionRef", net.liftweb.json.xschema.Decomposers.XDefinitionRefDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXDefinitionRef)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXRealField: net.liftweb.json.xschema.XSchema = JObject(JField("XRealField", net.liftweb.json.xschema.Decomposers.XRealFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXRealField)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXViewField: net.liftweb.json.xschema.XSchema = JObject(JField("XViewField", net.liftweb.json.xschema.Decomposers.XViewFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXViewField)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXConstantField: net.liftweb.json.xschema.XSchema = JObject(JField("XConstantField", net.liftweb.json.xschema.Decomposers.XConstantFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXConstantField)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    lazy val TestXSchemaFromXConstant: net.liftweb.json.xschema.XSchema = JObject(JField("XConstant", net.liftweb.json.xschema.Decomposers.XConstantDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXConstant)) :: Nil).deserialize[net.liftweb.json.xschema.XSchema]
    
    lazy val TestXReference: net.liftweb.json.xschema.XReference = JObject(Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXBoolean: net.liftweb.json.xschema.XReference = JObject(JField("XBoolean", net.liftweb.json.xschema.Decomposers.XBooleanDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXBoolean)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXInt: net.liftweb.json.xschema.XReference = JObject(JField("XInt", net.liftweb.json.xschema.Decomposers.XIntDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXInt)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXLong: net.liftweb.json.xschema.XReference = JObject(JField("XLong", net.liftweb.json.xschema.Decomposers.XLongDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXLong)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXFloat: net.liftweb.json.xschema.XReference = JObject(JField("XFloat", net.liftweb.json.xschema.Decomposers.XFloatDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXFloat)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXDouble: net.liftweb.json.xschema.XReference = JObject(JField("XDouble", net.liftweb.json.xschema.Decomposers.XDoubleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXDouble)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXString: net.liftweb.json.xschema.XReference = JObject(JField("XString", net.liftweb.json.xschema.Decomposers.XStringDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXString)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXJSON: net.liftweb.json.xschema.XReference = JObject(JField("XJSON", net.liftweb.json.xschema.Decomposers.XJSONDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXJSON)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXList: net.liftweb.json.xschema.XReference = JObject(JField("XList", net.liftweb.json.xschema.Decomposers.XListDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXList)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXSet: net.liftweb.json.xschema.XReference = JObject(JField("XSet", net.liftweb.json.xschema.Decomposers.XSetDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXSet)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXArray: net.liftweb.json.xschema.XReference = JObject(JField("XArray", net.liftweb.json.xschema.Decomposers.XArrayDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXArray)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXMap: net.liftweb.json.xschema.XReference = JObject(JField("XMap", net.liftweb.json.xschema.Decomposers.XMapDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXMap)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXOptional: net.liftweb.json.xschema.XReference = JObject(JField("XOptional", net.liftweb.json.xschema.Decomposers.XOptionalDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOptional)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXTuple: net.liftweb.json.xschema.XReference = JObject(JField("XTuple", net.liftweb.json.xschema.Decomposers.XTupleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXTuple)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    lazy val TestXReferenceFromXDefinitionRef: net.liftweb.json.xschema.XReference = JObject(JField("XDefinitionRef", net.liftweb.json.xschema.Decomposers.XDefinitionRefDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXDefinitionRef)) :: Nil).deserialize[net.liftweb.json.xschema.XReference]
    
    lazy val TestXPrimitiveRef: net.liftweb.json.xschema.XPrimitiveRef = JObject(Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXBoolean: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XBoolean", net.liftweb.json.xschema.Decomposers.XBooleanDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXBoolean)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXInt: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XInt", net.liftweb.json.xschema.Decomposers.XIntDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXInt)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXLong: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XLong", net.liftweb.json.xschema.Decomposers.XLongDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXLong)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXFloat: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XFloat", net.liftweb.json.xschema.Decomposers.XFloatDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXFloat)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXDouble: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XDouble", net.liftweb.json.xschema.Decomposers.XDoubleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXDouble)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXString: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XString", net.liftweb.json.xschema.Decomposers.XStringDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXString)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    lazy val TestXPrimitiveRefFromXJSON: net.liftweb.json.xschema.XPrimitiveRef = JObject(JField("XJSON", net.liftweb.json.xschema.Decomposers.XJSONDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXJSON)) :: Nil).deserialize[net.liftweb.json.xschema.XPrimitiveRef]
    
    lazy val TestXContainerRef: net.liftweb.json.xschema.XContainerRef = JObject(Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXList: net.liftweb.json.xschema.XContainerRef = JObject(JField("XList", net.liftweb.json.xschema.Decomposers.XListDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXList)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXSet: net.liftweb.json.xschema.XContainerRef = JObject(JField("XSet", net.liftweb.json.xschema.Decomposers.XSetDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXSet)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXArray: net.liftweb.json.xschema.XContainerRef = JObject(JField("XArray", net.liftweb.json.xschema.Decomposers.XArrayDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXArray)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXMap: net.liftweb.json.xschema.XContainerRef = JObject(JField("XMap", net.liftweb.json.xschema.Decomposers.XMapDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXMap)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXOptional: net.liftweb.json.xschema.XContainerRef = JObject(JField("XOptional", net.liftweb.json.xschema.Decomposers.XOptionalDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOptional)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    lazy val TestXContainerRefFromXTuple: net.liftweb.json.xschema.XContainerRef = JObject(JField("XTuple", net.liftweb.json.xschema.Decomposers.XTupleDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXTuple)) :: Nil).deserialize[net.liftweb.json.xschema.XContainerRef]
    
    lazy val TestXCollection: net.liftweb.json.xschema.XCollection = JObject(Nil).deserialize[net.liftweb.json.xschema.XCollection]
    lazy val TestXCollectionFromXList: net.liftweb.json.xschema.XCollection = JObject(JField("XList", net.liftweb.json.xschema.Decomposers.XListDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXList)) :: Nil).deserialize[net.liftweb.json.xschema.XCollection]
    lazy val TestXCollectionFromXSet: net.liftweb.json.xschema.XCollection = JObject(JField("XSet", net.liftweb.json.xschema.Decomposers.XSetDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXSet)) :: Nil).deserialize[net.liftweb.json.xschema.XCollection]
    lazy val TestXCollectionFromXArray: net.liftweb.json.xschema.XCollection = JObject(JField("XArray", net.liftweb.json.xschema.Decomposers.XArrayDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXArray)) :: Nil).deserialize[net.liftweb.json.xschema.XCollection]
    
    lazy val TestXDefinition: net.liftweb.json.xschema.XDefinition = JObject(Nil).deserialize[net.liftweb.json.xschema.XDefinition]
    lazy val TestXDefinitionFromXProduct: net.liftweb.json.xschema.XDefinition = JObject(JField("XProduct", net.liftweb.json.xschema.Decomposers.XProductDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXProduct)) :: Nil).deserialize[net.liftweb.json.xschema.XDefinition]
    lazy val TestXDefinitionFromXCoproduct: net.liftweb.json.xschema.XDefinition = JObject(JField("XCoproduct", net.liftweb.json.xschema.Decomposers.XCoproductDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXCoproduct)) :: Nil).deserialize[net.liftweb.json.xschema.XDefinition]
    lazy val TestXDefinitionFromXUnion: net.liftweb.json.xschema.XDefinition = JObject(JField("XUnion", net.liftweb.json.xschema.Decomposers.XUnionDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXUnion)) :: Nil).deserialize[net.liftweb.json.xschema.XDefinition]
    
    lazy val TestXMultitype: net.liftweb.json.xschema.XMultitype = JObject(Nil).deserialize[net.liftweb.json.xschema.XMultitype]
    lazy val TestXMultitypeFromXCoproduct: net.liftweb.json.xschema.XMultitype = JObject(JField("XCoproduct", net.liftweb.json.xschema.Decomposers.XCoproductDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXCoproduct)) :: Nil).deserialize[net.liftweb.json.xschema.XMultitype]
    lazy val TestXMultitypeFromXUnion: net.liftweb.json.xschema.XMultitype = JObject(JField("XUnion", net.liftweb.json.xschema.Decomposers.XUnionDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXUnion)) :: Nil).deserialize[net.liftweb.json.xschema.XMultitype]
    
    lazy val TestXField: net.liftweb.json.xschema.XField = JObject(Nil).deserialize[net.liftweb.json.xschema.XField]
    lazy val TestXFieldFromXRealField: net.liftweb.json.xschema.XField = JObject(JField("XRealField", net.liftweb.json.xschema.Decomposers.XRealFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXRealField)) :: Nil).deserialize[net.liftweb.json.xschema.XField]
    lazy val TestXFieldFromXViewField: net.liftweb.json.xschema.XField = JObject(JField("XViewField", net.liftweb.json.xschema.Decomposers.XViewFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXViewField)) :: Nil).deserialize[net.liftweb.json.xschema.XField]
    lazy val TestXFieldFromXConstantField: net.liftweb.json.xschema.XField = JObject(JField("XConstantField", net.liftweb.json.xschema.Decomposers.XConstantFieldDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXConstantField)) :: Nil).deserialize[net.liftweb.json.xschema.XField]
    
    lazy val TestXOrder: net.liftweb.json.xschema.XOrder = JObject(Nil).deserialize[net.liftweb.json.xschema.XOrder]
    lazy val TestXOrderFromXOrderAscending: net.liftweb.json.xschema.XOrder = JObject(JField("XOrderAscending", net.liftweb.json.xschema.Decomposers.XOrderAscendingDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOrderAscending)) :: Nil).deserialize[net.liftweb.json.xschema.XOrder]
    lazy val TestXOrderFromXOrderDescending: net.liftweb.json.xschema.XOrder = JObject(JField("XOrderDescending", net.liftweb.json.xschema.Decomposers.XOrderDescendingDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOrderDescending)) :: Nil).deserialize[net.liftweb.json.xschema.XOrder]
    lazy val TestXOrderFromXOrderIgnore: net.liftweb.json.xschema.XOrder = JObject(JField("XOrderIgnore", net.liftweb.json.xschema.Decomposers.XOrderIgnoreDecomposer.decompose(net.liftweb.json.xschema.ProductTestData.TestXOrderIgnore)) :: Nil).deserialize[net.liftweb.json.xschema.XOrder]
  }
  class DataCoproductSerializationTest extends Runner(DataCoproductSerializationExamples) with JUnit
  object DataCoproductSerializationExamples extends Specification {
    "Deserialization of XSchema succeeds even when information is missing" in {
      CoproductTestData.TestXSchema.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema has non-zero information content" in {
      CoproductTestData.TestXSchema.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XSchema (from XProduct) succeeds" in {
      CoproductTestData.TestXSchemaFromXProduct.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XProduct) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXProduct.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XCoproduct) succeeds" in {
      CoproductTestData.TestXSchemaFromXCoproduct.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XCoproduct) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXCoproduct.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XUnion) succeeds" in {
      CoproductTestData.TestXSchemaFromXUnion.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XUnion) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXUnion.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XBoolean) succeeds" in {
      CoproductTestData.TestXSchemaFromXBoolean.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XBoolean) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXBoolean.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XInt) succeeds" in {
      CoproductTestData.TestXSchemaFromXInt.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XInt) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXInt.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XLong) succeeds" in {
      CoproductTestData.TestXSchemaFromXLong.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XLong) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXLong.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XFloat) succeeds" in {
      CoproductTestData.TestXSchemaFromXFloat.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XFloat) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXFloat.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XDouble) succeeds" in {
      CoproductTestData.TestXSchemaFromXDouble.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XDouble) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXDouble.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XString) succeeds" in {
      CoproductTestData.TestXSchemaFromXString.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XString) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXString.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XJSON) succeeds" in {
      CoproductTestData.TestXSchemaFromXJSON.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XJSON) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXJSON.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XList) succeeds" in {
      CoproductTestData.TestXSchemaFromXList.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XList) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXList.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XSet) succeeds" in {
      CoproductTestData.TestXSchemaFromXSet.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XSet) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXSet.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XArray) succeeds" in {
      CoproductTestData.TestXSchemaFromXArray.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XArray) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXArray.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XMap) succeeds" in {
      CoproductTestData.TestXSchemaFromXMap.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XMap) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXMap.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XOptional) succeeds" in {
      CoproductTestData.TestXSchemaFromXOptional.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XOptional) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXOptional.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XTuple) succeeds" in {
      CoproductTestData.TestXSchemaFromXTuple.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XTuple) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXTuple.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XDefinitionRef) succeeds" in {
      CoproductTestData.TestXSchemaFromXDefinitionRef.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XDefinitionRef) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXDefinitionRef.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XRealField) succeeds" in {
      CoproductTestData.TestXSchemaFromXRealField.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XRealField) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXRealField.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XViewField) succeeds" in {
      CoproductTestData.TestXSchemaFromXViewField.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XViewField) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXViewField.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XConstantField) succeeds" in {
      CoproductTestData.TestXSchemaFromXConstantField.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XConstantField) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXConstantField.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XSchema (from XConstant) succeeds" in {
      CoproductTestData.TestXSchemaFromXConstant.isInstanceOf[net.liftweb.json.xschema.XSchema] must be (true)
    }            
    "Serialization of XSchema (from XConstant) has non-zero information content" in {
      CoproductTestData.TestXSchemaFromXConstant.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XReference succeeds even when information is missing" in {
      CoproductTestData.TestXReference.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference has non-zero information content" in {
      CoproductTestData.TestXReference.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XReference (from XBoolean) succeeds" in {
      CoproductTestData.TestXReferenceFromXBoolean.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XBoolean) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXBoolean.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XInt) succeeds" in {
      CoproductTestData.TestXReferenceFromXInt.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XInt) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXInt.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XLong) succeeds" in {
      CoproductTestData.TestXReferenceFromXLong.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XLong) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXLong.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XFloat) succeeds" in {
      CoproductTestData.TestXReferenceFromXFloat.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XFloat) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXFloat.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XDouble) succeeds" in {
      CoproductTestData.TestXReferenceFromXDouble.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XDouble) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXDouble.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XString) succeeds" in {
      CoproductTestData.TestXReferenceFromXString.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XString) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXString.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XJSON) succeeds" in {
      CoproductTestData.TestXReferenceFromXJSON.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XJSON) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXJSON.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XList) succeeds" in {
      CoproductTestData.TestXReferenceFromXList.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XList) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXList.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XSet) succeeds" in {
      CoproductTestData.TestXReferenceFromXSet.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XSet) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXSet.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XArray) succeeds" in {
      CoproductTestData.TestXReferenceFromXArray.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XArray) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXArray.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XMap) succeeds" in {
      CoproductTestData.TestXReferenceFromXMap.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XMap) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXMap.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XOptional) succeeds" in {
      CoproductTestData.TestXReferenceFromXOptional.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XOptional) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXOptional.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XTuple) succeeds" in {
      CoproductTestData.TestXReferenceFromXTuple.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XTuple) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXTuple.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XReference (from XDefinitionRef) succeeds" in {
      CoproductTestData.TestXReferenceFromXDefinitionRef.isInstanceOf[net.liftweb.json.xschema.XReference] must be (true)
    }            
    "Serialization of XReference (from XDefinitionRef) has non-zero information content" in {
      CoproductTestData.TestXReferenceFromXDefinitionRef.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XPrimitiveRef succeeds even when information is missing" in {
      CoproductTestData.TestXPrimitiveRef.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRef.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XPrimitiveRef (from XBoolean) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXBoolean.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XBoolean) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXBoolean.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XInt) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXInt.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XInt) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXInt.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XLong) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXLong.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XLong) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXLong.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XFloat) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXFloat.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XFloat) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXFloat.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XDouble) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXDouble.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XDouble) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXDouble.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XString) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXString.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XString) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXString.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XPrimitiveRef (from XJSON) succeeds" in {
      CoproductTestData.TestXPrimitiveRefFromXJSON.isInstanceOf[net.liftweb.json.xschema.XPrimitiveRef] must be (true)
    }            
    "Serialization of XPrimitiveRef (from XJSON) has non-zero information content" in {
      CoproductTestData.TestXPrimitiveRefFromXJSON.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XContainerRef succeeds even when information is missing" in {
      CoproductTestData.TestXContainerRef.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef has non-zero information content" in {
      CoproductTestData.TestXContainerRef.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XContainerRef (from XList) succeeds" in {
      CoproductTestData.TestXContainerRefFromXList.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XList) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXList.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XContainerRef (from XSet) succeeds" in {
      CoproductTestData.TestXContainerRefFromXSet.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XSet) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXSet.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XContainerRef (from XArray) succeeds" in {
      CoproductTestData.TestXContainerRefFromXArray.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XArray) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXArray.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XContainerRef (from XMap) succeeds" in {
      CoproductTestData.TestXContainerRefFromXMap.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XMap) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXMap.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XContainerRef (from XOptional) succeeds" in {
      CoproductTestData.TestXContainerRefFromXOptional.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XOptional) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXOptional.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XContainerRef (from XTuple) succeeds" in {
      CoproductTestData.TestXContainerRefFromXTuple.isInstanceOf[net.liftweb.json.xschema.XContainerRef] must be (true)
    }            
    "Serialization of XContainerRef (from XTuple) has non-zero information content" in {
      CoproductTestData.TestXContainerRefFromXTuple.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XCollection succeeds even when information is missing" in {
      CoproductTestData.TestXCollection.isInstanceOf[net.liftweb.json.xschema.XCollection] must be (true)
    }            
    "Serialization of XCollection has non-zero information content" in {
      CoproductTestData.TestXCollection.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XCollection (from XList) succeeds" in {
      CoproductTestData.TestXCollectionFromXList.isInstanceOf[net.liftweb.json.xschema.XCollection] must be (true)
    }            
    "Serialization of XCollection (from XList) has non-zero information content" in {
      CoproductTestData.TestXCollectionFromXList.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XCollection (from XSet) succeeds" in {
      CoproductTestData.TestXCollectionFromXSet.isInstanceOf[net.liftweb.json.xschema.XCollection] must be (true)
    }            
    "Serialization of XCollection (from XSet) has non-zero information content" in {
      CoproductTestData.TestXCollectionFromXSet.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XCollection (from XArray) succeeds" in {
      CoproductTestData.TestXCollectionFromXArray.isInstanceOf[net.liftweb.json.xschema.XCollection] must be (true)
    }            
    "Serialization of XCollection (from XArray) has non-zero information content" in {
      CoproductTestData.TestXCollectionFromXArray.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XDefinition succeeds even when information is missing" in {
      CoproductTestData.TestXDefinition.isInstanceOf[net.liftweb.json.xschema.XDefinition] must be (true)
    }            
    "Serialization of XDefinition has non-zero information content" in {
      CoproductTestData.TestXDefinition.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XDefinition (from XProduct) succeeds" in {
      CoproductTestData.TestXDefinitionFromXProduct.isInstanceOf[net.liftweb.json.xschema.XDefinition] must be (true)
    }            
    "Serialization of XDefinition (from XProduct) has non-zero information content" in {
      CoproductTestData.TestXDefinitionFromXProduct.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XDefinition (from XCoproduct) succeeds" in {
      CoproductTestData.TestXDefinitionFromXCoproduct.isInstanceOf[net.liftweb.json.xschema.XDefinition] must be (true)
    }            
    "Serialization of XDefinition (from XCoproduct) has non-zero information content" in {
      CoproductTestData.TestXDefinitionFromXCoproduct.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XDefinition (from XUnion) succeeds" in {
      CoproductTestData.TestXDefinitionFromXUnion.isInstanceOf[net.liftweb.json.xschema.XDefinition] must be (true)
    }            
    "Serialization of XDefinition (from XUnion) has non-zero information content" in {
      CoproductTestData.TestXDefinitionFromXUnion.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XMultitype succeeds even when information is missing" in {
      CoproductTestData.TestXMultitype.isInstanceOf[net.liftweb.json.xschema.XMultitype] must be (true)
    }            
    "Serialization of XMultitype has non-zero information content" in {
      CoproductTestData.TestXMultitype.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XMultitype (from XCoproduct) succeeds" in {
      CoproductTestData.TestXMultitypeFromXCoproduct.isInstanceOf[net.liftweb.json.xschema.XMultitype] must be (true)
    }            
    "Serialization of XMultitype (from XCoproduct) has non-zero information content" in {
      CoproductTestData.TestXMultitypeFromXCoproduct.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XMultitype (from XUnion) succeeds" in {
      CoproductTestData.TestXMultitypeFromXUnion.isInstanceOf[net.liftweb.json.xschema.XMultitype] must be (true)
    }            
    "Serialization of XMultitype (from XUnion) has non-zero information content" in {
      CoproductTestData.TestXMultitypeFromXUnion.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XField succeeds even when information is missing" in {
      CoproductTestData.TestXField.isInstanceOf[net.liftweb.json.xschema.XField] must be (true)
    }            
    "Serialization of XField has non-zero information content" in {
      CoproductTestData.TestXField.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XField (from XRealField) succeeds" in {
      CoproductTestData.TestXFieldFromXRealField.isInstanceOf[net.liftweb.json.xschema.XField] must be (true)
    }            
    "Serialization of XField (from XRealField) has non-zero information content" in {
      CoproductTestData.TestXFieldFromXRealField.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XField (from XViewField) succeeds" in {
      CoproductTestData.TestXFieldFromXViewField.isInstanceOf[net.liftweb.json.xschema.XField] must be (true)
    }            
    "Serialization of XField (from XViewField) has non-zero information content" in {
      CoproductTestData.TestXFieldFromXViewField.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XField (from XConstantField) succeeds" in {
      CoproductTestData.TestXFieldFromXConstantField.isInstanceOf[net.liftweb.json.xschema.XField] must be (true)
    }            
    "Serialization of XField (from XConstantField) has non-zero information content" in {
      CoproductTestData.TestXFieldFromXConstantField.serialize mustNot be (JObject(Nil))
    }
    
    "Deserialization of XOrder succeeds even when information is missing" in {
      CoproductTestData.TestXOrder.isInstanceOf[net.liftweb.json.xschema.XOrder] must be (true)
    }            
    "Serialization of XOrder has non-zero information content" in {
      CoproductTestData.TestXOrder.serialize mustNot be (JObject(Nil))
    }
  
    "Deserialization of XOrder (from XOrderAscending) succeeds" in {
      CoproductTestData.TestXOrderFromXOrderAscending.isInstanceOf[net.liftweb.json.xschema.XOrder] must be (true)
    }            
    "Serialization of XOrder (from XOrderAscending) has non-zero information content" in {
      CoproductTestData.TestXOrderFromXOrderAscending.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XOrder (from XOrderDescending) succeeds" in {
      CoproductTestData.TestXOrderFromXOrderDescending.isInstanceOf[net.liftweb.json.xschema.XOrder] must be (true)
    }            
    "Serialization of XOrder (from XOrderDescending) has non-zero information content" in {
      CoproductTestData.TestXOrderFromXOrderDescending.serialize mustNot be (JObject(Nil))
    }
    "Deserialization of XOrder (from XOrderIgnore) succeeds" in {
      CoproductTestData.TestXOrderFromXOrderIgnore.isInstanceOf[net.liftweb.json.xschema.XOrder] must be (true)
    }            
    "Serialization of XOrder (from XOrderIgnore) has non-zero information content" in {
      CoproductTestData.TestXOrderFromXOrderIgnore.serialize mustNot be (JObject(Nil))
    }
  }
  class DataConstantsSerializationTest extends Runner(DataConstantsSerializationExamples) with JUnit
  object DataConstantsSerializationExamples extends Specification {
    
  }
}
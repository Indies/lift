// This code was auto-generated by Lift Json XSchema - do not edit
package ser {
  import net.liftweb.json.JsonParser._
  import net.liftweb.json.JsonAST._
  import net.liftweb.json.xschema.{SerializationImplicits, Extractor, ExtractionHelpers, Decomposer, DecomposerHelpers, DefaultExtractors, DefaultDecomposers, DefaultOrderings}
  import net.liftweb.json.xschema.{XRoot, XProduct, XCoproduct, XSchemaDerived}
  import net.liftweb.json.xschema.DefaultSerialization._
  
  
  trait Orderings {
    
    
    
  }
  object Orderings extends Orderings
  
  case class Project(name: String, startDate: String, lang: Option[ser.Language], teams: List[ser.Team]) extends Ordered[ser.Project] {
    def compare(that: ser.Project): Int = {
      import Orderings._
      
      if (this == that) return 0
      
      var c: Int = 0
      
      c = this.name.compare(that.name)
      if (c != 0) return c * 1
      
      c = this.startDate.compare(that.startDate)
      if (c != 0) return c * 1
      
      c = this.lang.compare(that.lang)
      if (c != 0) return c * 1
      
      c = this.teams.compare(that.teams)
      if (c != 0) return c * 1
      
      return this.hashCode - that.hashCode
    }
    
  }
  object Project extends XSchemaDerived {
    lazy val xschema: XProduct = net.liftweb.json.xschema.Extractors.XProductExtractor.extract(JObject(JField("XProduct",JObject(JField("name",JString("Project"))::JField("namespace",JString("ser"))::JField("properties",JArray(Nil))::JField("terms",JArray(JObject(JField("XRealField",JObject(JField("name",JString("name"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XString",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("startDate"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XString",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("lang"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XContainerRef",JObject(JField("XOptional",JObject(JField("optionalType",JObject(JField("XDefinitionRef",JObject(JField("name",JString("Language"))::JField("namespace",JString("ser"))::Nil))::Nil))::Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("teams"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XContainerRef",JObject(JField("XCollection",JObject(JField("XList",JObject(JField("elementType",JObject(JField("XDefinitionRef",JObject(JField("name",JString("Team"))::JField("namespace",JString("ser"))::Nil))::Nil))::Nil))::Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::Nil))::Nil))::Nil))
  }
  
  case class Language(name: String, version: Double) extends Ordered[ser.Language] {
    def compare(that: ser.Language): Int = {
      import Orderings._
      
      if (this == that) return 0
      
      var c: Int = 0
      
      c = this.name.compare(that.name)
      if (c != 0) return c * 1
      
      c = this.version.compare(that.version)
      if (c != 0) return c * 1
      
      return this.hashCode - that.hashCode
    }
    
  }
  object Language extends XSchemaDerived {
    lazy val xschema: XProduct = net.liftweb.json.xschema.Extractors.XProductExtractor.extract(JObject(JField("XProduct",JObject(JField("name",JString("Language"))::JField("namespace",JString("ser"))::JField("properties",JArray(Nil))::JField("terms",JArray(JObject(JField("XRealField",JObject(JField("name",JString("name"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XString",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("version"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XDouble",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::Nil))::Nil))::Nil))
  }
  
  case class Team(role: String, members: List[ser.Employee]) extends Ordered[ser.Team] {
    def compare(that: ser.Team): Int = {
      import Orderings._
      
      if (this == that) return 0
      
      var c: Int = 0
      
      c = this.role.compare(that.role)
      if (c != 0) return c * 1
      
      c = this.members.compare(that.members)
      if (c != 0) return c * 1
      
      return this.hashCode - that.hashCode
    }
    
  }
  object Team extends XSchemaDerived {
    lazy val xschema: XProduct = net.liftweb.json.xschema.Extractors.XProductExtractor.extract(JObject(JField("XProduct",JObject(JField("name",JString("Team"))::JField("namespace",JString("ser"))::JField("properties",JArray(Nil))::JField("terms",JArray(JObject(JField("XRealField",JObject(JField("name",JString("role"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XString",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("members"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XContainerRef",JObject(JField("XCollection",JObject(JField("XList",JObject(JField("elementType",JObject(JField("XDefinitionRef",JObject(JField("name",JString("Employee"))::JField("namespace",JString("ser"))::Nil))::Nil))::Nil))::Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::Nil))::Nil))::Nil))
  }
  
  case class Employee(name: String, experience: Int) extends Ordered[ser.Employee] {
    def compare(that: ser.Employee): Int = {
      import Orderings._
      
      if (this == that) return 0
      
      var c: Int = 0
      
      c = this.name.compare(that.name)
      if (c != 0) return c * 1
      
      c = this.experience.compare(that.experience)
      if (c != 0) return c * 1
      
      return this.hashCode - that.hashCode
    }
    
  }
  object Employee extends XSchemaDerived {
    lazy val xschema: XProduct = net.liftweb.json.xschema.Extractors.XProductExtractor.extract(JObject(JField("XProduct",JObject(JField("name",JString("Employee"))::JField("namespace",JString("ser"))::JField("properties",JArray(Nil))::JField("terms",JArray(JObject(JField("XRealField",JObject(JField("name",JString("name"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XString",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::JObject(JField("XRealField",JObject(JField("name",JString("experience"))::JField("properties",JArray(Nil))::JField("fieldType",JObject(JField("XPrimitiveRef",JObject(JField("XInt",JObject(Nil))::Nil))::Nil))::JField("default",JString(""))::JField("order",JObject(JField("XOrderAscending",JObject(Nil))::Nil))::Nil))::Nil)::Nil))::Nil))::Nil))
  }
  
  trait Extractors extends DefaultExtractors with ExtractionHelpers {
    implicit val ProjectExtractor: Extractor[ser.Project] = new Extractor[ser.Project] {
      def extract(jvalue: JValue): ser.Project = {
        Project(
          extractField[String](jvalue, "name", JString("")),
          extractField[String](jvalue, "startDate", JString("")),
          extractField[Option[ser.Language]](jvalue, "lang", JString("")),
          extractField[List[ser.Team]](jvalue, "teams", JString(""))
        )
      }
    }
    
    implicit val LanguageExtractor: Extractor[ser.Language] = new Extractor[ser.Language] {
      def extract(jvalue: JValue): ser.Language = {
        Language(
          extractField[String](jvalue, "name", JString("")),
          extractField[Double](jvalue, "version", JString(""))
        )
      }
    }
    
    implicit val TeamExtractor: Extractor[ser.Team] = new Extractor[ser.Team] {
      def extract(jvalue: JValue): ser.Team = {
        Team(
          extractField[String](jvalue, "role", JString("")),
          extractField[List[ser.Employee]](jvalue, "members", JString(""))
        )
      }
    }
    
    implicit val EmployeeExtractor: Extractor[ser.Employee] = new Extractor[ser.Employee] {
      def extract(jvalue: JValue): ser.Employee = {
        Employee(
          extractField[String](jvalue, "name", JString("")),
          extractField[Int](jvalue, "experience", JString(""))
        )
      }
    }
  }
  object Extractors extends Extractors
  
  trait Decomposers extends DefaultDecomposers with DecomposerHelpers {
    implicit val ProjectDecomposer: Decomposer[ser.Project] = new Decomposer[ser.Project] {
      def decompose(tvalue: ser.Project): JValue = {
        JObject(
          JField("name", tvalue.name.serialize) ::
          JField("startDate", tvalue.startDate.serialize) ::
          JField("lang", tvalue.lang.serialize) ::
          JField("teams", tvalue.teams.serialize) :: Nil
        )
      }
    }
    
    implicit val LanguageDecomposer: Decomposer[ser.Language] = new Decomposer[ser.Language] {
      def decompose(tvalue: ser.Language): JValue = {
        JObject(
          JField("name", tvalue.name.serialize) ::
          JField("version", tvalue.version.serialize) :: Nil
        )
      }
    }
    
    implicit val TeamDecomposer: Decomposer[ser.Team] = new Decomposer[ser.Team] {
      def decompose(tvalue: ser.Team): JValue = {
        JObject(
          JField("role", tvalue.role.serialize) ::
          JField("members", tvalue.members.serialize) :: Nil
        )
      }
    }
    
    implicit val EmployeeDecomposer: Decomposer[ser.Employee] = new Decomposer[ser.Employee] {
      def decompose(tvalue: ser.Employee): JValue = {
        JObject(
          JField("name", tvalue.name.serialize) ::
          JField("experience", tvalue.experience.serialize) :: Nil
        )
      }
    }
  }
  object Decomposers extends Decomposers
  
  object Serialization extends SerializationImplicits with Decomposers with Extractors with Orderings {
    lazy val xschema: XRoot = net.liftweb.json.xschema.Extractors.XRootExtractor.extract(parse("""{"definitions":[{"XProduct":{"name":"Project","namespace":"ser","properties":[],"terms":[{"XRealField":{"name":"name","properties":[],"fieldType":{"XPrimitiveRef":{"XString":{}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"startDate","properties":[],"fieldType":{"XPrimitiveRef":{"XString":{}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"lang","properties":[],"fieldType":{"XContainerRef":{"XOptional":{"optionalType":{"XDefinitionRef":{"name":"Language","namespace":"ser"}}}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"teams","properties":[],"fieldType":{"XContainerRef":{"XCollection":{"XList":{"elementType":{"XDefinitionRef":{"name":"Team","namespace":"ser"}}}}}},"default":"","order":{"XOrderAscending":{}}}}]}},{"XProduct":{"name":"Language","namespace":"ser","properties":[],"terms":[{"XRealField":{"name":"name","properties":[],"fieldType":{"XPrimitiveRef":{"XString":{}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"version","properties":[],"fieldType":{"XPrimitiveRef":{"XDouble":{}}},"default":"","order":{"XOrderAscending":{}}}}]}},{"XProduct":{"name":"Team","namespace":"ser","properties":[],"terms":[{"XRealField":{"name":"role","properties":[],"fieldType":{"XPrimitiveRef":{"XString":{}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"members","properties":[],"fieldType":{"XContainerRef":{"XCollection":{"XList":{"elementType":{"XDefinitionRef":{"name":"Employee","namespace":"ser"}}}}}},"default":"","order":{"XOrderAscending":{}}}}]}},{"XProduct":{"name":"Employee","namespace":"ser","properties":[],"terms":[{"XRealField":{"name":"name","properties":[],"fieldType":{"XPrimitiveRef":{"XString":{}}},"default":"","order":{"XOrderAscending":{}}}},{"XRealField":{"name":"experience","properties":[],"fieldType":{"XPrimitiveRef":{"XInt":{}}},"default":"","order":{"XOrderAscending":{}}}}]}}],"constants":[],"properties":[]}"""))
  }
  
  object Constants {
    import Serialization._
    
    
  }
}